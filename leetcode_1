题目描述

给定一个整数数组 nums 和一个整数目标值target，请你在该数组中找出和为目标值target的那两个整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。

示例 1：
输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
示例 2：
输入：nums = [3,2,4], target = 6
输出：[1,2]
示例 3：
输入：nums = [3,3], target = 6
输出：[0,1]
 
提示：
2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
只会存在一个有效答案
进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/two-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


解题思路

遍历数组每个数，在哈希表中记录每个数所需的剩余数值及其索引号，当遍历每个数时，先查找所需数值是否在哈希表中已经存在，如存在则找到了答案，否则记录并继续遍历。由于哈希表的查找速度为O(1)，所以最终时间复杂度为O(n)


最终代码

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int, int> hash_map;
        vector<int> index;
        for (int i = 0; i < nums.size(); ++i) {
            int num = nums[i];
            if (hash_map.find(target - num) == hash_map.end()) {
                hash_map.insert(make_pair(num, i));
            } else {
                index.push_back(hash_map[target - num]);
                index.push_back(i);
                break;
            }
        }
        return index;
    }
};
